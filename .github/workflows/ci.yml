name: 'CI'

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

permissions:
  id-token: write
  contents: read

env:
  WORKING_DIR: infrastructure/terraform/environments/dev

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ secrets.AWS_REGION }}

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v3

  #   - name: Terraform Format
  #     run: terraform fmt -check
  #     continue-on-error: true

  #   - name: Terraform Init
  #     run: terraform init

  #   - name: Terraform Plan
  #     run: terraform plan -no-color
  #     continue-on-error: true

    - name: Build and Test
      run: |
        cd $GITHUB_WORKSPACE
        
        # Build the CI image
        docker build \
        -t backend-ci \
        --target ci \
        -f infrastructure/docker/backend/Dockerfile \
        ./backend

        # Run tests
        docker run --rm \
        -p 8080:8080 \
        -e APP_NAME=${{ secrets.APP_NAME }} \
        -e APP_PORT=${{ secrets.APP_PORT }} \
        -e AWS_EC2_METADATA_DISABLED=true \
        -e AWS_DISABLE_CACHE=true \
        -e DYNAMODB_TABLE_NAME=${{ secrets.DYNAMODB_TABLE_NAME }} \
        -e AWS_REGION=${{ secrets.AWS_REGION }} \
        -e SES_FROM_ADDRESS=${{ secrets.SES_FROM_ADDRESS }} \
        -e SES_TO_ADDRESS=${{ secrets.SES_TO_ADDRESS }} \
        -e RUN_ENV=ci \
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
        -e DOMAIN=${{ secrets.DOMAIN }} \
        backend-ci go test ./tests/feature -v