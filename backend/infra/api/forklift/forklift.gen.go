//go:build go1.22

// Package forklift provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package forklift

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// Forklift defines model for Forklift.
type Forklift struct {
	// Application フォークリフトの用途
	Application string `json:"application"`

	// Attachment フォークリフトのアタッチメントタイプ
	Attachment *string `json:"attachment,omitempty"`

	// Ct フォークリフトのCT
	Ct *string `json:"ct,omitempty"`

	// Enginetype フォークリフトのエンジンタイプ
	Enginetype string `json:"enginetype"`

	// Fob フォークリフトのFOB価格
	Fob float64 `json:"fob"`

	// Height フォークリフトの高さ
	Height float64 `json:"height"`

	// HourMeter アワーメーターの読み取り値
	HourMeter float64 `json:"hourMeter"`

	// Maker フォークリフトのメーカー
	Maker string `json:"maker"`

	// Model フォークリフトのモデル
	Model string `json:"model"`

	// SerialNo フォークリフトのシリアル番号
	SerialNo string `json:"serialNo"`

	// Year 製造年
	Year int `json:"year"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// エンジンタイプでフォークリフトを取得
	// (GET /forklifts/type/{enginetype})
	GetForkliftsTypeEnginetype(w http.ResponseWriter, r *http.Request, enginetype string)
	// エンジンタイプ、モデル、シリアル番号でフォークリフトを取得
	// (GET /forklifts/type/{enginetype}/{model}/{serial})
	GetForkliftsTypeEnginetypeModelSerial(w http.ResponseWriter, r *http.Request, enginetype string, model string, serial string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetForkliftsTypeEnginetype operation middleware
func (siw *ServerInterfaceWrapper) GetForkliftsTypeEnginetype(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "enginetype" -------------
	var enginetype string

	err = runtime.BindStyledParameterWithOptions("simple", "enginetype", r.PathValue("enginetype"), &enginetype, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "enginetype", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetForkliftsTypeEnginetype(w, r, enginetype)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetForkliftsTypeEnginetypeModelSerial operation middleware
func (siw *ServerInterfaceWrapper) GetForkliftsTypeEnginetypeModelSerial(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "enginetype" -------------
	var enginetype string

	err = runtime.BindStyledParameterWithOptions("simple", "enginetype", r.PathValue("enginetype"), &enginetype, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "enginetype", Err: err})
		return
	}

	// ------------- Path parameter "model" -------------
	var model string

	err = runtime.BindStyledParameterWithOptions("simple", "model", r.PathValue("model"), &model, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "model", Err: err})
		return
	}

	// ------------- Path parameter "serial" -------------
	var serial string

	err = runtime.BindStyledParameterWithOptions("simple", "serial", r.PathValue("serial"), &serial, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serial", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetForkliftsTypeEnginetypeModelSerial(w, r, enginetype, model, serial)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/forklifts/type/{enginetype}", wrapper.GetForkliftsTypeEnginetype)
	m.HandleFunc("GET "+options.BaseURL+"/forklifts/type/{enginetype}/{model}/{serial}", wrapper.GetForkliftsTypeEnginetypeModelSerial)

	return m
}
